import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { fetchCount } from './todosAPI';

export interface TodoState {
  id: number;
  text: string;
  completed: boolean;
}

export interface TodosState {
  todos: Array<TodoState>;
  visibilityFilter: string;
}

const initialState: TodosState = {
  todos: [],
  visibilityFilter: 'SHOW_ALL',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  'counter/fetchCount',
  async (amount: number) => {
    const response = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

let nextTodoId = 0;

export const todosSlice = createSlice({
  name: 'todos',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addTodo: (state, action: PayloadAction<string>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      const id = nextTodoId++;
      state.todos.push({ id, text: action.payload, completed: false } as TodoState);
    },
    toggleTodo: (state, action: PayloadAction<number>) => {
      const t = state.todos.find(t => t.id === action.payload);
      if (t) {
        t.completed = !t.completed;
      }
    },
    switchVisibilityFilter: (state, action: PayloadAction<string>) => {
      state.visibilityFilter = action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     });
  // },
});

export const { addTodo, toggleTodo, switchVisibilityFilter } = todosSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectTodos = (state: RootState) => state.todos.todos;
export const selectVisibilityFilter = (state: RootState) => state.todos.visibilityFilter;
export const selectVisibleTodos = (state: RootState) => {
  const { todos, visibilityFilter: filter } = state.todos;
  switch (filter) {
    case 'SHOW_COMPLETED':
      return todos.filter(
        t => t.completed
      );
    case 'SHOW_ACTIVE':
      return todos.filter(
        t => !t.completed
      );
    default:
      return todos;
  }
}

export default todosSlice.reducer;
